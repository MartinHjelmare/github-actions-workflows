name: CI

on:
  push:
    branches:
      - main
      - "renovate/**"
  pull_request:
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: false
      PYPI_TOKEN:
        required: true

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.6.0
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4.7.0
        with:
          python-version: "3.9"
      - name: Load cached Poetry installation
        uses: actions/cache@v3.3.1
        with:
          path: ~/.local # the path depends on the OS
          key: dotlocal-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-0 # increment to reset cache
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3.3.1
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      - name: Run all pre-commit hooks
        run: |
          source $VENV
          pre-commit run --all-files

  # Make sure commit messages follow the conventional commits convention:
  # https://www.conventionalcommits.org
  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.6.0
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5.4.3

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
        os:
          - ubuntu-latest
          - macOS-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3.6.0
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4.7.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load cached Poetry installation
        uses: actions/cache@v3.3.1
        with:
          path: ~/.local # the path depends on the OS
          key: dotlocal-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-0 # increment to reset cache
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3.3.1
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      - name: Test with Pytest
        run: |
          source $VENV
          pytest --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  release:
    runs-on: ubuntu-latest
    environment: release
    if: github.ref == 'refs/heads/main'
    needs:
      - test
      - lint
      - commitlint

    steps:
      - uses: actions/checkout@v3.6.0
        with:
          fetch-depth: 0

      # Run semantic release:
      # - Update CHANGELOG.md
      # - Update version in code
      # - Create git tag
      # - Create GitHub release
      # - Publish to PyPI
      - name: Python Semantic Release
        uses: relekang/python-semantic-release@v8.0.8
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pypi_token: ${{ secrets.PYPI_TOKEN }}
